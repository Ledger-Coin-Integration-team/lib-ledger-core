// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

#include "NJSCosmosLikeAccountCpp.hpp"
#include "NJSObjectWrapper.hpp"
#include "NJSHexUtils.hpp"

using namespace v8;
using namespace node;
using namespace std;

NAN_METHOD(NJSCosmosLikeAccount::broadcastRawTransaction) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::broadcastRawTransaction needs 1 arguments");
    }

    //Check if parameters have correct types
    Nan::Utf8String string_arg_0(info[0]->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0 = std::string(*string_arg_0);

    //Create promise and set it into Callback
    auto arg_1_resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    NJSStringCallback *njs_ptr_arg_1 = new NJSStringCallback(arg_1_resolver);
    std::shared_ptr<NJSStringCallback> arg_1(njs_ptr_arg_1);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeAccount>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::broadcastRawTransaction : implementation of CosmosLikeAccount is not valid");
    }
    cpp_impl->broadcastRawTransaction(arg_0,arg_1);
    info.GetReturnValue().Set(arg_1_resolver->GetPromise());
}
NAN_METHOD(NJSCosmosLikeAccount::broadcastTransaction) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::broadcastTransaction needs 1 arguments");
    }

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_0 = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeTransaction>::Unwrap(njs_arg_0);
    if(!arg_0)
    {
        return Nan::ThrowError("NodeJs Object to NJSCosmosLikeTransaction failed");
    }


    //Create promise and set it into Callback
    auto arg_1_resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    NJSStringCallback *njs_ptr_arg_1 = new NJSStringCallback(arg_1_resolver);
    std::shared_ptr<NJSStringCallback> arg_1(njs_ptr_arg_1);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeAccount>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::broadcastTransaction : implementation of CosmosLikeAccount is not valid");
    }
    cpp_impl->broadcastTransaction(arg_0,arg_1);
    info.GetReturnValue().Set(arg_1_resolver->GetPromise());
}
NAN_METHOD(NJSCosmosLikeAccount::buildTransaction) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::buildTransaction needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeAccount>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::buildTransaction : implementation of CosmosLikeAccount is not valid");
    }

    auto result = cpp_impl->buildTransaction();

    //Wrap result in node object
    auto arg_0 = NJSCosmosLikeTransactionBuilder::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSCosmosLikeAccount::getEstimatedGasLimit) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::getEstimatedGasLimit needs 1 arguments");
    }

    //Check if parameters have correct types
    Local<Object> njs_arg_0 = info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
    auto arg_0 = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeTransaction>::Unwrap(njs_arg_0);
    if(!arg_0)
    {
        return Nan::ThrowError("NodeJs Object to NJSCosmosLikeTransaction failed");
    }


    //Create promise and set it into Callback
    auto arg_1_resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    NJSBigIntCallback *njs_ptr_arg_1 = new NJSBigIntCallback(arg_1_resolver);
    std::shared_ptr<NJSBigIntCallback> arg_1(njs_ptr_arg_1);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeAccount>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::getEstimatedGasLimit : implementation of CosmosLikeAccount is not valid");
    }
    cpp_impl->getEstimatedGasLimit(arg_0,arg_1);
    info.GetReturnValue().Set(arg_1_resolver->GetPromise());
}
NAN_METHOD(NJSCosmosLikeAccount::estimateGas) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::estimateGas needs 1 arguments");
    }

    //Check if parameters have correct types

    auto field_arg_0_1 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("memo").ToLocalChecked()).ToLocalChecked();
    auto arg_0_1 = std::experimental::optional<std::string>();
    if(!field_arg_0_1->IsNull() && !field_arg_0_1->IsUndefined())
    {
        Nan::Utf8String string_opt_arg_0_1(field_arg_0_1->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_0_1 = std::string(*string_opt_arg_0_1);
        arg_0_1.emplace(opt_arg_0_1);
    }


    auto field_arg_0_2 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("messages").ToLocalChecked()).ToLocalChecked();
    vector<std::shared_ptr<CosmosLikeMessage>> arg_0_2;
    Local<Array> arg_0_2_container = Local<Array>::Cast(field_arg_0_2);
    for(uint32_t arg_0_2_id = 0; arg_0_2_id < arg_0_2_container->Length(); arg_0_2_id++)
    {
        if(arg_0_2_container->Get(Nan::GetCurrentContext(), arg_0_2_id).ToLocalChecked()->IsObject())
        {
            Local<Object> njs_arg_0_2_elem = arg_0_2_container->Get(Nan::GetCurrentContext(), arg_0_2_id).ToLocalChecked()->ToObject(Nan::GetCurrentContext()).ToLocalChecked();
            auto arg_0_2_elem = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeMessage>::Unwrap(njs_arg_0_2_elem);
            if(!arg_0_2_elem)
            {
                return Nan::ThrowError("NodeJs Object to NJSCosmosLikeMessage failed");
            }

            arg_0_2.emplace_back(arg_0_2_elem);
        }
    }


    auto field_arg_0_3 = Nan::Get(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked(), Nan::New<String>("amplifier").ToLocalChecked()).ToLocalChecked();
    auto arg_0_3 = std::experimental::optional<std::string>();
    if(!field_arg_0_3->IsNull() && !field_arg_0_3->IsUndefined())
    {
        Nan::Utf8String string_opt_arg_0_3(field_arg_0_3->ToString(Nan::GetCurrentContext()).ToLocalChecked());
        auto opt_arg_0_3 = std::string(*string_opt_arg_0_3);
        arg_0_3.emplace(opt_arg_0_3);
    }

    CosmosGasLimitRequest arg_0(arg_0_1, arg_0_2, arg_0_3);


    //Create promise and set it into Callback
    auto arg_1_resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    NJSBigIntCallback *njs_ptr_arg_1 = new NJSBigIntCallback(arg_1_resolver);
    std::shared_ptr<NJSBigIntCallback> arg_1(njs_ptr_arg_1);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeAccount>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::estimateGas : implementation of CosmosLikeAccount is not valid");
    }
    cpp_impl->estimateGas(arg_0,arg_1);
    info.GetReturnValue().Set(arg_1_resolver->GetPromise());
}
NAN_METHOD(NJSCosmosLikeAccount::getLatestValidatorSet) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::getLatestValidatorSet needs 0 arguments");
    }

    //Check if parameters have correct types

    //Create promise and set it into Callback
    auto arg_0_resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    NJSCosmosLikeValidatorListCallback *njs_ptr_arg_0 = new NJSCosmosLikeValidatorListCallback(arg_0_resolver);
    std::shared_ptr<NJSCosmosLikeValidatorListCallback> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeAccount>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::getLatestValidatorSet : implementation of CosmosLikeAccount is not valid");
    }
    cpp_impl->getLatestValidatorSet(arg_0);
    info.GetReturnValue().Set(arg_0_resolver->GetPromise());
}
NAN_METHOD(NJSCosmosLikeAccount::getValidatorInfo) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::getValidatorInfo needs 1 arguments");
    }

    //Check if parameters have correct types
    Nan::Utf8String string_arg_0(info[0]->ToString(Nan::GetCurrentContext()).ToLocalChecked());
    auto arg_0 = std::string(*string_arg_0);

    //Create promise and set it into Callback
    auto arg_1_resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    NJSCosmosLikeValidatorCallback *njs_ptr_arg_1 = new NJSCosmosLikeValidatorCallback(arg_1_resolver);
    std::shared_ptr<NJSCosmosLikeValidatorCallback> arg_1(njs_ptr_arg_1);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeAccount>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::getValidatorInfo : implementation of CosmosLikeAccount is not valid");
    }
    cpp_impl->getValidatorInfo(arg_0,arg_1);
    info.GetReturnValue().Set(arg_1_resolver->GetPromise());
}
NAN_METHOD(NJSCosmosLikeAccount::getTotalBalance) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::getTotalBalance needs 0 arguments");
    }

    //Check if parameters have correct types

    //Create promise and set it into Callback
    auto arg_0_resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    NJSAmountCallback *njs_ptr_arg_0 = new NJSAmountCallback(arg_0_resolver);
    std::shared_ptr<NJSAmountCallback> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeAccount>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::getTotalBalance : implementation of CosmosLikeAccount is not valid");
    }
    cpp_impl->getTotalBalance(arg_0);
    info.GetReturnValue().Set(arg_0_resolver->GetPromise());
}
NAN_METHOD(NJSCosmosLikeAccount::getDelegatedBalance) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::getDelegatedBalance needs 0 arguments");
    }

    //Check if parameters have correct types

    //Create promise and set it into Callback
    auto arg_0_resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    NJSAmountCallback *njs_ptr_arg_0 = new NJSAmountCallback(arg_0_resolver);
    std::shared_ptr<NJSAmountCallback> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeAccount>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::getDelegatedBalance : implementation of CosmosLikeAccount is not valid");
    }
    cpp_impl->getDelegatedBalance(arg_0);
    info.GetReturnValue().Set(arg_0_resolver->GetPromise());
}
NAN_METHOD(NJSCosmosLikeAccount::getPendingRewardsBalance) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::getPendingRewardsBalance needs 0 arguments");
    }

    //Check if parameters have correct types

    //Create promise and set it into Callback
    auto arg_0_resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    NJSAmountCallback *njs_ptr_arg_0 = new NJSAmountCallback(arg_0_resolver);
    std::shared_ptr<NJSAmountCallback> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeAccount>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::getPendingRewardsBalance : implementation of CosmosLikeAccount is not valid");
    }
    cpp_impl->getPendingRewardsBalance(arg_0);
    info.GetReturnValue().Set(arg_0_resolver->GetPromise());
}
NAN_METHOD(NJSCosmosLikeAccount::getUnbondingBalance) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::getUnbondingBalance needs 0 arguments");
    }

    //Check if parameters have correct types

    //Create promise and set it into Callback
    auto arg_0_resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    NJSAmountCallback *njs_ptr_arg_0 = new NJSAmountCallback(arg_0_resolver);
    std::shared_ptr<NJSAmountCallback> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeAccount>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::getUnbondingBalance : implementation of CosmosLikeAccount is not valid");
    }
    cpp_impl->getUnbondingBalance(arg_0);
    info.GetReturnValue().Set(arg_0_resolver->GetPromise());
}
NAN_METHOD(NJSCosmosLikeAccount::getSpendableBalance) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::getSpendableBalance needs 0 arguments");
    }

    //Check if parameters have correct types

    //Create promise and set it into Callback
    auto arg_0_resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    NJSAmountCallback *njs_ptr_arg_0 = new NJSAmountCallback(arg_0_resolver);
    std::shared_ptr<NJSAmountCallback> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeAccount>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::getSpendableBalance : implementation of CosmosLikeAccount is not valid");
    }
    cpp_impl->getSpendableBalance(arg_0);
    info.GetReturnValue().Set(arg_0_resolver->GetPromise());
}
NAN_METHOD(NJSCosmosLikeAccount::getDelegations) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::getDelegations needs 0 arguments");
    }

    //Check if parameters have correct types

    //Create promise and set it into Callback
    auto arg_0_resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    NJSCosmosLikeDelegationListCallback *njs_ptr_arg_0 = new NJSCosmosLikeDelegationListCallback(arg_0_resolver);
    std::shared_ptr<NJSCosmosLikeDelegationListCallback> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeAccount>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::getDelegations : implementation of CosmosLikeAccount is not valid");
    }
    cpp_impl->getDelegations(arg_0);
    info.GetReturnValue().Set(arg_0_resolver->GetPromise());
}
NAN_METHOD(NJSCosmosLikeAccount::getPendingRewards) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::getPendingRewards needs 0 arguments");
    }

    //Check if parameters have correct types

    //Create promise and set it into Callback
    auto arg_0_resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    NJSCosmosLikeRewardListCallback *njs_ptr_arg_0 = new NJSCosmosLikeRewardListCallback(arg_0_resolver);
    std::shared_ptr<NJSCosmosLikeRewardListCallback> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeAccount>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::getPendingRewards : implementation of CosmosLikeAccount is not valid");
    }
    cpp_impl->getPendingRewards(arg_0);
    info.GetReturnValue().Set(arg_0_resolver->GetPromise());
}
NAN_METHOD(NJSCosmosLikeAccount::getUnbondings) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::getUnbondings needs 0 arguments");
    }

    //Check if parameters have correct types

    //Create promise and set it into Callback
    auto arg_0_resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    NJSCosmosLikeUnbondingListCallback *njs_ptr_arg_0 = new NJSCosmosLikeUnbondingListCallback(arg_0_resolver);
    std::shared_ptr<NJSCosmosLikeUnbondingListCallback> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeAccount>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::getUnbondings : implementation of CosmosLikeAccount is not valid");
    }
    cpp_impl->getUnbondings(arg_0);
    info.GetReturnValue().Set(arg_0_resolver->GetPromise());
}
NAN_METHOD(NJSCosmosLikeAccount::getRedelegations) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::getRedelegations needs 0 arguments");
    }

    //Check if parameters have correct types

    //Create promise and set it into Callback
    auto arg_0_resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    NJSCosmosLikeRedelegationListCallback *njs_ptr_arg_0 = new NJSCosmosLikeRedelegationListCallback(arg_0_resolver);
    std::shared_ptr<NJSCosmosLikeRedelegationListCallback> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeAccount>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::getRedelegations : implementation of CosmosLikeAccount is not valid");
    }
    cpp_impl->getRedelegations(arg_0);
    info.GetReturnValue().Set(arg_0_resolver->GetPromise());
}
NAN_METHOD(NJSCosmosLikeAccount::getSequence) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::getSequence needs 0 arguments");
    }

    //Check if parameters have correct types

    //Create promise and set it into Callback
    auto arg_0_resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    NJSStringCallback *njs_ptr_arg_0 = new NJSStringCallback(arg_0_resolver);
    std::shared_ptr<NJSStringCallback> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeAccount>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::getSequence : implementation of CosmosLikeAccount is not valid");
    }
    cpp_impl->getSequence(arg_0);
    info.GetReturnValue().Set(arg_0_resolver->GetPromise());
}
NAN_METHOD(NJSCosmosLikeAccount::getAccountNumber) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::getAccountNumber needs 0 arguments");
    }

    //Check if parameters have correct types

    //Create promise and set it into Callback
    auto arg_0_resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    NJSStringCallback *njs_ptr_arg_0 = new NJSStringCallback(arg_0_resolver);
    std::shared_ptr<NJSStringCallback> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeAccount>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::getAccountNumber : implementation of CosmosLikeAccount is not valid");
    }
    cpp_impl->getAccountNumber(arg_0);
    info.GetReturnValue().Set(arg_0_resolver->GetPromise());
}
NAN_METHOD(NJSCosmosLikeAccount::getWithdrawAddress) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::getWithdrawAddress needs 0 arguments");
    }

    //Check if parameters have correct types

    //Create promise and set it into Callback
    auto arg_0_resolver = v8::Promise::Resolver::New(Nan::GetCurrentContext()).ToLocalChecked();
    NJSStringCallback *njs_ptr_arg_0 = new NJSStringCallback(arg_0_resolver);
    std::shared_ptr<NJSStringCallback> arg_0(njs_ptr_arg_0);


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeAccount>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSCosmosLikeAccount::getWithdrawAddress : implementation of CosmosLikeAccount is not valid");
    }
    cpp_impl->getWithdrawAddress(arg_0);
    info.GetReturnValue().Set(arg_0_resolver->GetPromise());
}

NAN_METHOD(NJSCosmosLikeAccount::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSCosmosLikeAccount function can only be called as constructor (use New)");
    }
    info.GetReturnValue().Set(info.This());
}


Nan::Persistent<ObjectTemplate> NJSCosmosLikeAccount::CosmosLikeAccount_prototype;

Local<Object> NJSCosmosLikeAccount::wrap(const std::shared_ptr<ledger::core::api::CosmosLikeAccount> &object) {
    Nan::EscapableHandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(CosmosLikeAccount_prototype);

    Local<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance(Nan::GetCurrentContext()).ToLocalChecked();
        djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeAccount>::Wrap(object, obj);
    }
    else
    {
        Nan::ThrowError("NJSCosmosLikeAccount::wrap: object template not valid");
    }
    return scope.Escape(obj);
}

NAN_METHOD(NJSCosmosLikeAccount::isNull) {
    auto cpp_implementation = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeAccount>::Unwrap(info.This());
    auto isNull = !cpp_implementation ? true : false;
    return info.GetReturnValue().Set(Nan::New<Boolean>(isNull));
}

void NJSCosmosLikeAccount::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSCosmosLikeAccount::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSCosmosLikeAccount").ToLocalChecked());

    //SetPrototypeMethod all methods
    Nan::SetPrototypeMethod(func_template,"broadcastRawTransaction", broadcastRawTransaction);
    Nan::SetPrototypeMethod(func_template,"broadcastTransaction", broadcastTransaction);
    Nan::SetPrototypeMethod(func_template,"buildTransaction", buildTransaction);
    Nan::SetPrototypeMethod(func_template,"getEstimatedGasLimit", getEstimatedGasLimit);
    Nan::SetPrototypeMethod(func_template,"estimateGas", estimateGas);
    Nan::SetPrototypeMethod(func_template,"getLatestValidatorSet", getLatestValidatorSet);
    Nan::SetPrototypeMethod(func_template,"getValidatorInfo", getValidatorInfo);
    Nan::SetPrototypeMethod(func_template,"getTotalBalance", getTotalBalance);
    Nan::SetPrototypeMethod(func_template,"getDelegatedBalance", getDelegatedBalance);
    Nan::SetPrototypeMethod(func_template,"getPendingRewardsBalance", getPendingRewardsBalance);
    Nan::SetPrototypeMethod(func_template,"getUnbondingBalance", getUnbondingBalance);
    Nan::SetPrototypeMethod(func_template,"getSpendableBalance", getSpendableBalance);
    Nan::SetPrototypeMethod(func_template,"getDelegations", getDelegations);
    Nan::SetPrototypeMethod(func_template,"getPendingRewards", getPendingRewards);
    Nan::SetPrototypeMethod(func_template,"getUnbondings", getUnbondings);
    Nan::SetPrototypeMethod(func_template,"getRedelegations", getRedelegations);
    Nan::SetPrototypeMethod(func_template,"getSequence", getSequence);
    Nan::SetPrototypeMethod(func_template,"getAccountNumber", getAccountNumber);
    Nan::SetPrototypeMethod(func_template,"getWithdrawAddress", getWithdrawAddress);
    Nan::SetPrototypeMethod(func_template,"isNull", isNull);
    //Set object prototype
    CosmosLikeAccount_prototype.Reset(objectTemplate);

    //Add template to target
    Nan::Set(target, Nan::New<String>("NJSCosmosLikeAccount").ToLocalChecked(), Nan::GetFunction(func_template).ToLocalChecked());
}
