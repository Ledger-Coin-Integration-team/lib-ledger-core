// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from ethereum_like_wallet.djinni

#ifndef DJINNI_GENERATED_NJSINTERNALTRANSACTION_HPP
#define DJINNI_GENERATED_NJSINTERNALTRANSACTION_HPP


#include "../../../core/src/api/OperationType.hpp"
#include "NJSBigIntCpp.hpp"
#include <cstdint>
#include <memory>
#include <string>
#include <vector>

#include <nan.h>
#include <node.h>
#include "../../../core/src/api/InternalTransaction.hpp"

using namespace v8;
using namespace node;
using namespace std;
using namespace ledger::core::api;

class NJSInternalTransaction final {
public:

    static void Initialize(Local<Object> target);
    NJSInternalTransaction() = delete;

    static Local<Object> wrap(const std::shared_ptr<ledger::core::api::InternalTransaction> &object);
    static Nan::Persistent<ObjectTemplate> InternalTransaction_prototype;

private:
    /** Get start gas (in wei) : maximum amount of gas the originator is willing to pay. */
    static NAN_METHOD(getGasLimit);

    /** Used gas (in wei) : used gas during this transaction: */
    static NAN_METHOD(getUsedGas);

    /** Get source ETH address. */
    static NAN_METHOD(getSender);

    /** Get destination ETH address. */
    static NAN_METHOD(getReceiver);

    /** Get amount of ether to send. */
    static NAN_METHOD(getValue);

    /** Get binary data payload. */
    static NAN_METHOD(getData);

    /** Get operation type : whether it is a SEND or RECEIVE. */
    static NAN_METHOD(getOperationType);

    static NAN_METHOD(New);

    static NAN_METHOD(isNull);
};
#endif //DJINNI_GENERATED_NJSINTERNALTRANSACTION_HPP
