// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from wallet.djinni

#include "NJSCosmosLikeUnbondingCpp.hpp"
#include "NJSObjectWrapper.hpp"
#include "NJSHexUtils.hpp"

using namespace v8;
using namespace node;
using namespace std;

NAN_METHOD(NJSCosmosLikeUnbonding::getDelegatorAddress) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSCosmosLikeUnbonding::getDelegatorAddress needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeUnbonding>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSCosmosLikeUnbonding::getDelegatorAddress : implementation of CosmosLikeUnbonding is not valid");
    }

    auto result = cpp_impl->getDelegatorAddress();

    //Wrap result in node object
    auto arg_0 = Nan::New<String>(result).ToLocalChecked();

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSCosmosLikeUnbonding::getValidatorAddress) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSCosmosLikeUnbonding::getValidatorAddress needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeUnbonding>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSCosmosLikeUnbonding::getValidatorAddress : implementation of CosmosLikeUnbonding is not valid");
    }

    auto result = cpp_impl->getValidatorAddress();

    //Wrap result in node object
    auto arg_0 = Nan::New<String>(result).ToLocalChecked();

    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSCosmosLikeUnbonding::getEntries) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSCosmosLikeUnbonding::getEntries needs 0 arguments");
    }

    //Check if parameters have correct types

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeUnbonding>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSCosmosLikeUnbonding::getEntries : implementation of CosmosLikeUnbonding is not valid");
    }

    auto result = cpp_impl->getEntries();

    //Wrap result in node object
    Local<Array> arg_0 = Nan::New<Array>();
    for(size_t arg_0_id = 0; arg_0_id < result.size(); arg_0_id++)
    {
        auto arg_0_elem = NJSCosmosLikeUnbondingEntry::wrap(result[arg_0_id]);

        Nan::Set(arg_0, (int)arg_0_id,arg_0_elem);
    }


    //Return result
    info.GetReturnValue().Set(arg_0);
}

NAN_METHOD(NJSCosmosLikeUnbonding::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSCosmosLikeUnbonding function can only be called as constructor (use New)");
    }
    info.GetReturnValue().Set(info.This());
}


Nan::Persistent<ObjectTemplate> NJSCosmosLikeUnbonding::CosmosLikeUnbonding_prototype;

Local<Object> NJSCosmosLikeUnbonding::wrap(const std::shared_ptr<ledger::core::api::CosmosLikeUnbonding> &object) {
    Nan::EscapableHandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(CosmosLikeUnbonding_prototype);

    Local<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance(Nan::GetCurrentContext()).ToLocalChecked();
        djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeUnbonding>::Wrap(object, obj);
    }
    else
    {
        Nan::ThrowError("NJSCosmosLikeUnbonding::wrap: object template not valid");
    }
    return scope.Escape(obj);
}

NAN_METHOD(NJSCosmosLikeUnbonding::isNull) {
    auto cpp_implementation = djinni::js::ObjectWrapper<ledger::core::api::CosmosLikeUnbonding>::Unwrap(info.This());
    auto isNull = !cpp_implementation ? true : false;
    return info.GetReturnValue().Set(Nan::New<Boolean>(isNull));
}

void NJSCosmosLikeUnbonding::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSCosmosLikeUnbonding::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSCosmosLikeUnbonding").ToLocalChecked());

    //SetPrototypeMethod all methods
    Nan::SetPrototypeMethod(func_template,"getDelegatorAddress", getDelegatorAddress);
    Nan::SetPrototypeMethod(func_template,"getValidatorAddress", getValidatorAddress);
    Nan::SetPrototypeMethod(func_template,"getEntries", getEntries);
    Nan::SetPrototypeMethod(func_template,"isNull", isNull);
    //Set object prototype
    CosmosLikeUnbonding_prototype.Reset(objectTemplate);

    //Add template to target
    Nan::Set(target, Nan::New<String>("NJSCosmosLikeUnbonding").ToLocalChecked(), Nan::GetFunction(func_template).ToLocalChecked());
}
