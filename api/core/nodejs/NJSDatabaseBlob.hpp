// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from database.djinni

#ifndef DJINNI_GENERATED_NJSDATABASEBLOB_HPP
#define DJINNI_GENERATED_NJSDATABASEBLOB_HPP


#include <cstdint>
#include <vector>

#include <nan.h>
#include <node.h>
#include "../../../core/src/api/DatabaseBlob.hpp"

using namespace v8;
using namespace node;
using namespace std;
using namespace ledger::core::api;

class NJSDatabaseBlob: public ledger::core::api::DatabaseBlob {
public:

    static void Initialize(Local<Object> target);

    static Local<Object> wrap(const std::shared_ptr<ledger::core::api::DatabaseBlob> &object);
    static Nan::Persistent<ObjectTemplate> DatabaseBlob_prototype;
    ~NJSDatabaseBlob()
    {
        njs_impl.Reset();
    };
    NJSDatabaseBlob(Local<Object> njs_implementation){njs_impl.Reset(njs_implementation);};

    /**
     * Reads bytes from the blob at the given offset and of the a given length and return them in a byte array.
     * @param offset Start to read bytes from the blob at offset value.
     * @param length Maximum number of byte read from the blob
     */
    std::vector<uint8_t> read(int64_t offset, int64_t length);

    /**
     * Write the given bytes at the given offset in the BLOB.
     * @return The number of written bytes
     */
    int64_t write(int64_t offset, const std::vector<uint8_t> & data);

    /**
     * Append the given bytes to the BLOB.
     * @param The data to append to the BLOB
     * @return the number of bytes written
     */
    int64_t append(const std::vector<uint8_t> & data);

    /**
     * Truncate the BLOB to the length given by the newLen parameter (in bytes).
     * @param newLen The final size of the BLOB
     * @return The number of byte truncated
     */
    int64_t trim(int64_t newLen);

    /**
     * Get the size of the BLOB.
     * @return the size of the BLOB in bytes.
     */
    int64_t size();

private:
    /**
     * Reads bytes from the blob at the given offset and of the a given length and return them in a byte array.
     * @param offset Start to read bytes from the blob at offset value.
     * @param length Maximum number of byte read from the blob
     */
    static NAN_METHOD(read);

    /**
     * Write the given bytes at the given offset in the BLOB.
     * @return The number of written bytes
     */
    static NAN_METHOD(write);

    /**
     * Append the given bytes to the BLOB.
     * @param The data to append to the BLOB
     * @return the number of bytes written
     */
    static NAN_METHOD(append);

    /**
     * Truncate the BLOB to the length given by the newLen parameter (in bytes).
     * @param newLen The final size of the BLOB
     * @return The number of byte truncated
     */
    static NAN_METHOD(trim);

    /**
     * Get the size of the BLOB.
     * @return the size of the BLOB in bytes.
     */
    static NAN_METHOD(size);

    static NAN_METHOD(New);

    Nan::Persistent<Object> njs_impl;
};
#endif //DJINNI_GENERATED_NJSDATABASEBLOB_HPP
