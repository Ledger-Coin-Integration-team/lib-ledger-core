// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from addresses.djinni

#ifndef DJINNI_GENERATED_NJSBITCOINLIKEADDRESS_HPP
#define DJINNI_GENERATED_NJSBITCOINLIKEADDRESS_HPP


#include "../../../core/src/api/BitcoinLikeNetworkParameters.hpp"
#include <cstdint>
#include <memory>
#include <string>
#include <vector>

#include <nan.h>
#include <node.h>
#include "../../../core/src/api/BitcoinLikeAddress.hpp"

using namespace v8;
using namespace node;
using namespace std;
using namespace ledger::core::api;

class NJSBitcoinLikeAddress final {
public:

    static void Initialize(Local<Object> target);
    NJSBitcoinLikeAddress() = delete;

    static Local<Object> wrap(const std::shared_ptr<ledger::core::api::BitcoinLikeAddress> &object);
    static Nan::Persistent<ObjectTemplate> BitcoinLikeAddress_prototype;

private:
    /**
     * Gets the version of the address (P2SH or P2PKH)
     * @return The version of the address
     */
    static NAN_METHOD(getVersion);

    /**
     * Gets the raw hash160 of the public key
     * @return The 20 bytes of the public key hash160
     */
    static NAN_METHOD(getHash160);

    /**
     * Gets the network parameters used for serializing the address
     * @return The network parameters of the address
     */
    static NAN_METHOD(getNetworkParameters);

    /**
     * Serializes the hash160 into a Base58 encoded address (with checksum)
     * @return The Base58 serialization
     */
    static NAN_METHOD(toBase58);

    /**
     * Get the Bech32 encoded address (with respect to BIP173)
     * @return The Bech32 encoded address
     */
    static NAN_METHOD(toBech32);

    /**
     * Serializes the hash160 to a payment uri (i.e bitcoin:16UwLL9Risc3QfPqBUvKofHmBQ7wMtjvM)
     * @return A payment uri to this address
     * toPaymentUri(): string;
     * Checks if the given address is a P2SH address
     * @return True if the keychain engine is P2SH
     */
    static NAN_METHOD(isP2SH);

    /**
     * Checks if the given address is a P2PKH address
     * @return if the keychain engine is P2PKH
     */
    static NAN_METHOD(isP2PKH);

    /**
     * Checks if the given address is a P2WSH address
     * @return True if the keychain engine is P2WSH
     */
    static NAN_METHOD(isP2WSH);

    /**
     * Checks if the given address is a P2WPKH address
     * @return True if the keychain engine is P2WPKH
     */
    static NAN_METHOD(isP2WPKH);

    static NAN_METHOD(New);

    static NAN_METHOD(isNull);
};
#endif //DJINNI_GENERATED_NJSBITCOINLIKEADDRESS_HPP
