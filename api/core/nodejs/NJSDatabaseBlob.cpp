// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from database.djinni

#include "NJSDatabaseBlob.hpp"
#include "NJSObjectWrapper.hpp"
#include "NJSHexUtils.hpp"

using namespace v8;
using namespace node;
using namespace std;

std::vector<uint8_t> NJSDatabaseBlob::read(int64_t offset, int64_t length)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<Number>(offset);
    auto arg_1 = Nan::New<Number>(length);
    Local<Value> args[2] = {arg_0,arg_1};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseBlob::read fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("read").ToLocalChecked()).ToLocalChecked();
    auto result_read = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,2,args);
    if(result_read.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseBlob::read call failed");
    }
    auto checkedResult_read = result_read.ToLocalChecked();
    if(!checkedResult_read->IsString())
    {
        Nan::ThrowError("checkedResult_read should be a hexadecimal string.");
    }
    std::vector<uint8_t> fResult_read;
    Nan::Utf8String str_fResult_read(checkedResult_read);
    std::string string_fResult_read(*str_fResult_read, str_fResult_read.length());
    if (string_fResult_read.rfind("0x", 0) == 0)
    {
        fResult_read = djinni::js::hex::toByteArray(string_fResult_read.substr(2));
    }
    else
    {
        fResult_read = std::vector<uint8_t>(string_fResult_read.cbegin(), string_fResult_read.cend());
    }

    return fResult_read;
}

int64_t NJSDatabaseBlob::write(int64_t offset, const std::vector<uint8_t> & data)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<Number>(offset);
    auto arg_1 = Nan::New<String>("0x" + djinni::js::hex::toString(data)).ToLocalChecked();

    Local<Value> args[2] = {arg_0,arg_1};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseBlob::write fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("write").ToLocalChecked()).ToLocalChecked();
    auto result_write = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,2,args);
    if(result_write.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseBlob::write call failed");
    }
    auto checkedResult_write = result_write.ToLocalChecked();
    auto fResult_write = Nan::To<int64_t>(checkedResult_write).FromJust();
    return fResult_write;
}

int64_t NJSDatabaseBlob::append(const std::vector<uint8_t> & data)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<String>("0x" + djinni::js::hex::toString(data)).ToLocalChecked();

    Local<Value> args[1] = {arg_0};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseBlob::append fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("append").ToLocalChecked()).ToLocalChecked();
    auto result_append = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,1,args);
    if(result_append.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseBlob::append call failed");
    }
    auto checkedResult_append = result_append.ToLocalChecked();
    auto fResult_append = Nan::To<int64_t>(checkedResult_append).FromJust();
    return fResult_append;
}

int64_t NJSDatabaseBlob::trim(int64_t newLen)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<Number>(newLen);
    Local<Value> args[1] = {arg_0};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseBlob::trim fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("trim").ToLocalChecked()).ToLocalChecked();
    auto result_trim = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,1,args);
    if(result_trim.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseBlob::trim call failed");
    }
    auto checkedResult_trim = result_trim.ToLocalChecked();
    auto fResult_trim = Nan::To<int64_t>(checkedResult_trim).FromJust();
    return fResult_trim;
}

int64_t NJSDatabaseBlob::size()
{
    Nan::HandleScope scope;
    //Wrap parameters
    Local<Value> args[1];
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSDatabaseBlob::size fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("size").ToLocalChecked()).ToLocalChecked();
    auto result_size = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,0,args);
    if(result_size.IsEmpty())
    {
        Nan::ThrowError("NJSDatabaseBlob::size call failed");
    }
    auto checkedResult_size = result_size.ToLocalChecked();
    auto fResult_size = Nan::To<int64_t>(checkedResult_size).FromJust();
    return fResult_size;
}

NAN_METHOD(NJSDatabaseBlob::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSDatabaseBlob function can only be called as constructor (use New)");
    }

    if(!info[0]->IsObject())
    {
        return Nan::ThrowError("NJSDatabaseBlob::New requires an implementation from node");
    }
    auto node_instance = std::make_shared<NJSDatabaseBlob>(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked());
    djinni::js::ObjectWrapper<NJSDatabaseBlob>::Wrap(node_instance, info.This());
    info.GetReturnValue().Set(info.This());
}


Nan::Persistent<ObjectTemplate> NJSDatabaseBlob::DatabaseBlob_prototype;

Local<Object> NJSDatabaseBlob::wrap(const std::shared_ptr<ledger::core::api::DatabaseBlob> &object) {
    Nan::EscapableHandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(DatabaseBlob_prototype);

    Local<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance(Nan::GetCurrentContext()).ToLocalChecked();
        djinni::js::ObjectWrapper<ledger::core::api::DatabaseBlob>::Wrap(object, obj);
    }
    else
    {
        Nan::ThrowError("NJSDatabaseBlob::wrap: object template not valid");
    }
    return scope.Escape(obj);
}

void NJSDatabaseBlob::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSDatabaseBlob::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSDatabaseBlob").ToLocalChecked());
    Nan::SetPrototypeMethod(func_template,"New", New);
    //Set object prototype
    DatabaseBlob_prototype.Reset(objectTemplate);

    //Add template to target
    Nan::Set(target, Nan::New<String>("NJSDatabaseBlob").ToLocalChecked(), Nan::GetFunction(func_template).ToLocalChecked());
}
