// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from crypto.djinni

#include "NJSHashAlgorithmHelper.hpp"
#include "NJSObjectWrapper.hpp"
#include "NJSHexUtils.hpp"

using namespace v8;
using namespace node;
using namespace std;

std::vector<uint8_t> NJSHashAlgorithmHelper::ripemd160(const std::vector<uint8_t> & data)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<String>("0x" + djinni::js::hex::toString(data)).ToLocalChecked();

    Local<Value> args[1] = {arg_0};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSHashAlgorithmHelper::ripemd160 fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("ripemd160").ToLocalChecked()).ToLocalChecked();
    auto result_ripemd160 = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,1,args);
    if(result_ripemd160.IsEmpty())
    {
        Nan::ThrowError("NJSHashAlgorithmHelper::ripemd160 call failed");
    }
    auto checkedResult_ripemd160 = result_ripemd160.ToLocalChecked();
    if(!checkedResult_ripemd160->IsString())
    {
        Nan::ThrowError("checkedResult_ripemd160 should be a hexadecimal string.");
    }
    std::vector<uint8_t> fResult_ripemd160;
    Nan::Utf8String str_fResult_ripemd160(checkedResult_ripemd160);
    std::string string_fResult_ripemd160(*str_fResult_ripemd160, str_fResult_ripemd160.length());
    if (string_fResult_ripemd160.rfind("0x", 0) == 0)
    {
        fResult_ripemd160 = djinni::js::hex::toByteArray(string_fResult_ripemd160.substr(2));
    }
    else
    {
        fResult_ripemd160 = std::vector<uint8_t>(string_fResult_ripemd160.cbegin(), string_fResult_ripemd160.cend());
    }

    return fResult_ripemd160;
}

std::vector<uint8_t> NJSHashAlgorithmHelper::sha256(const std::vector<uint8_t> & data)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<String>("0x" + djinni::js::hex::toString(data)).ToLocalChecked();

    Local<Value> args[1] = {arg_0};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSHashAlgorithmHelper::sha256 fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("sha256").ToLocalChecked()).ToLocalChecked();
    auto result_sha256 = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,1,args);
    if(result_sha256.IsEmpty())
    {
        Nan::ThrowError("NJSHashAlgorithmHelper::sha256 call failed");
    }
    auto checkedResult_sha256 = result_sha256.ToLocalChecked();
    if(!checkedResult_sha256->IsString())
    {
        Nan::ThrowError("checkedResult_sha256 should be a hexadecimal string.");
    }
    std::vector<uint8_t> fResult_sha256;
    Nan::Utf8String str_fResult_sha256(checkedResult_sha256);
    std::string string_fResult_sha256(*str_fResult_sha256, str_fResult_sha256.length());
    if (string_fResult_sha256.rfind("0x", 0) == 0)
    {
        fResult_sha256 = djinni::js::hex::toByteArray(string_fResult_sha256.substr(2));
    }
    else
    {
        fResult_sha256 = std::vector<uint8_t>(string_fResult_sha256.cbegin(), string_fResult_sha256.cend());
    }

    return fResult_sha256;
}

std::vector<uint8_t> NJSHashAlgorithmHelper::keccak256(const std::vector<uint8_t> & data)
{
    Nan::HandleScope scope;
    //Wrap parameters
    auto arg_0 = Nan::New<String>("0x" + djinni::js::hex::toString(data)).ToLocalChecked();

    Local<Value> args[1] = {arg_0};
    Local<Object> local_njs_impl = Nan::New<Object>(njs_impl);
    if(!local_njs_impl->IsObject())
    {
        Nan::ThrowError("NJSHashAlgorithmHelper::keccak256 fail to retrieve node implementation");
    }
    auto calling_funtion = Nan::Get(local_njs_impl,Nan::New<String>("keccak256").ToLocalChecked()).ToLocalChecked();
    auto result_keccak256 = Nan::CallAsFunction(calling_funtion->ToObject(Nan::GetCurrentContext()).ToLocalChecked(),local_njs_impl,1,args);
    if(result_keccak256.IsEmpty())
    {
        Nan::ThrowError("NJSHashAlgorithmHelper::keccak256 call failed");
    }
    auto checkedResult_keccak256 = result_keccak256.ToLocalChecked();
    if(!checkedResult_keccak256->IsString())
    {
        Nan::ThrowError("checkedResult_keccak256 should be a hexadecimal string.");
    }
    std::vector<uint8_t> fResult_keccak256;
    Nan::Utf8String str_fResult_keccak256(checkedResult_keccak256);
    std::string string_fResult_keccak256(*str_fResult_keccak256, str_fResult_keccak256.length());
    if (string_fResult_keccak256.rfind("0x", 0) == 0)
    {
        fResult_keccak256 = djinni::js::hex::toByteArray(string_fResult_keccak256.substr(2));
    }
    else
    {
        fResult_keccak256 = std::vector<uint8_t>(string_fResult_keccak256.cbegin(), string_fResult_keccak256.cend());
    }

    return fResult_keccak256;
}

NAN_METHOD(NJSHashAlgorithmHelper::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSHashAlgorithmHelper function can only be called as constructor (use New)");
    }

    if(!info[0]->IsObject())
    {
        return Nan::ThrowError("NJSHashAlgorithmHelper::New requires an implementation from node");
    }
    auto node_instance = std::make_shared<NJSHashAlgorithmHelper>(info[0]->ToObject(Nan::GetCurrentContext()).ToLocalChecked());
    djinni::js::ObjectWrapper<NJSHashAlgorithmHelper>::Wrap(node_instance, info.This());
    info.GetReturnValue().Set(info.This());
}


Nan::Persistent<ObjectTemplate> NJSHashAlgorithmHelper::HashAlgorithmHelper_prototype;

Local<Object> NJSHashAlgorithmHelper::wrap(const std::shared_ptr<ledger::core::api::HashAlgorithmHelper> &object) {
    Nan::EscapableHandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(HashAlgorithmHelper_prototype);

    Local<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance(Nan::GetCurrentContext()).ToLocalChecked();
        djinni::js::ObjectWrapper<ledger::core::api::HashAlgorithmHelper>::Wrap(object, obj);
    }
    else
    {
        Nan::ThrowError("NJSHashAlgorithmHelper::wrap: object template not valid");
    }
    return scope.Escape(obj);
}

void NJSHashAlgorithmHelper::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSHashAlgorithmHelper::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSHashAlgorithmHelper").ToLocalChecked());
    Nan::SetPrototypeMethod(func_template,"New", New);
    //Set object prototype
    HashAlgorithmHelper_prototype.Reset(objectTemplate);

    //Add template to target
    Nan::Set(target, Nan::New<String>("NJSHashAlgorithmHelper").ToLocalChecked(), Nan::GetFunction(func_template).ToLocalChecked());
}
