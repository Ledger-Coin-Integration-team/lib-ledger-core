// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from database.djinni

#ifndef DJINNI_GENERATED_NJSDATABASESTATEMENT_HPP
#define DJINNI_GENERATED_NJSDATABASESTATEMENT_HPP


#include "../../../core/src/api/DatabaseBlob.hpp"
#include "../../../core/src/api/DatabaseColumn.hpp"
#include "../../../core/src/api/DatabaseResultSet.hpp"
#include "NJSDatabaseBlob.hpp"
#include "NJSDatabaseColumn.hpp"
#include "NJSDatabaseResultSet.hpp"
#include <cstdint>
#include <memory>
#include <string>

#include <nan.h>
#include <node.h>
#include "../../../core/src/api/DatabaseStatement.hpp"

using namespace v8;
using namespace node;
using namespace std;
using namespace ledger::core::api;

class NJSDatabaseStatement: public ledger::core::api::DatabaseStatement {
public:

    static void Initialize(Local<Object> target);

    static Local<Object> wrap(const std::shared_ptr<ledger::core::api::DatabaseStatement> &object);
    static Nan::Persistent<ObjectTemplate> DatabaseStatement_prototype;
    ~NJSDatabaseStatement()
    {
        njs_impl.Reset();
    };
    NJSDatabaseStatement(Local<Object> njs_implementation){njs_impl.Reset(njs_implementation);};

    /**
     * Bind the designated parameter to the given 16bit integer value.
     * @param pos The position of the parameter in the query
     * @param value The value to bind
     */
    void bindShort(int32_t pos, int16_t value);

    /**
     * Bind the designated parameter to the given 32bit integer value.
     * @param pos The position of the parameter in the query
     * @param value The value to bind
     */
    void bindInt(int32_t pos, int32_t value);

    /**
     * Bind the designated parameter to the given 64bit integer value.
     * @param pos The position of the parameter in the query
     * @param value The value to bind
     */
    void bindLong(int32_t pos, int64_t value);

    /**
     * Bind the designated parameter to the given 32bit floating point number value.
     * @param pos The position of the parameter in the query
     * @param value The value to bind
     */
    void bindFloat(int32_t pos, float value);

    /**
     * Bind the designated parameter to the given 64bit floating point number value.
     * @param pos The position of the parameter in the query
     * @param value The value to bind
     */
    void bindDouble(int32_t pos, double value);

    /**
     * Bind the designated parameter to the given string.
     * @param pos The position of the parameter in the query
     * @param value The value to bind
     */
    void bindString(int32_t pos, const std::string & value);

    /**
     * Bind the designated parameter to the given BLOB.
     * @param pos The position of the parameter in the query
     * @param value The value to bind
     */
    void bindBlob(int32_t pos, const std::shared_ptr<::ledger::core::api::DatabaseBlob> & value);

    /**
     * Bind the designated parameter to the NULL value in SQL.
     * @param pos The position of the parameter in the query
     * @param value The value to bind
     */
    void bindNull(int32_t pos);

    /**
     * Describe the metadata attached to the designated column (e.g. data type, column name...)
     * @return Column metadata descriptor
     */
    std::shared_ptr<DatabaseColumn> describeColumn(int32_t colNum);

    /**
     * Get the number of column that will be available into the result row (e.g. "SELECT name, age FROM USERS"
     * would return 2).
     * @return The number of the columns available in the result
     */
    int32_t getColumnCount();

    /**
     * Execute the statement with the past bound values.
     * @return The result of the execution of the statement on the database.
     */
    std::shared_ptr<DatabaseResultSet> execute();

    /** Reset all bindings. This call is used before reusing a statement instance in order to repeat it multiple time. */
    void reset();

    /** Close the statement and release all allocated resources. The statement shouldn't be used after this call. */
    void close();

private:
    /**
     * Bind the designated parameter to the given 16bit integer value.
     * @param pos The position of the parameter in the query
     * @param value The value to bind
     */
    static NAN_METHOD(bindShort);

    /**
     * Bind the designated parameter to the given 32bit integer value.
     * @param pos The position of the parameter in the query
     * @param value The value to bind
     */
    static NAN_METHOD(bindInt);

    /**
     * Bind the designated parameter to the given 64bit integer value.
     * @param pos The position of the parameter in the query
     * @param value The value to bind
     */
    static NAN_METHOD(bindLong);

    /**
     * Bind the designated parameter to the given 32bit floating point number value.
     * @param pos The position of the parameter in the query
     * @param value The value to bind
     */
    static NAN_METHOD(bindFloat);

    /**
     * Bind the designated parameter to the given 64bit floating point number value.
     * @param pos The position of the parameter in the query
     * @param value The value to bind
     */
    static NAN_METHOD(bindDouble);

    /**
     * Bind the designated parameter to the given string.
     * @param pos The position of the parameter in the query
     * @param value The value to bind
     */
    static NAN_METHOD(bindString);

    /**
     * Bind the designated parameter to the given BLOB.
     * @param pos The position of the parameter in the query
     * @param value The value to bind
     */
    static NAN_METHOD(bindBlob);

    /**
     * Bind the designated parameter to the NULL value in SQL.
     * @param pos The position of the parameter in the query
     * @param value The value to bind
     */
    static NAN_METHOD(bindNull);

    /**
     * Describe the metadata attached to the designated column (e.g. data type, column name...)
     * @return Column metadata descriptor
     */
    static NAN_METHOD(describeColumn);

    /**
     * Get the number of column that will be available into the result row (e.g. "SELECT name, age FROM USERS"
     * would return 2).
     * @return The number of the columns available in the result
     */
    static NAN_METHOD(getColumnCount);

    /**
     * Execute the statement with the past bound values.
     * @return The result of the execution of the statement on the database.
     */
    static NAN_METHOD(execute);

    /** Reset all bindings. This call is used before reusing a statement instance in order to repeat it multiple time. */
    static NAN_METHOD(reset);

    /** Close the statement and release all allocated resources. The statement shouldn't be used after this call. */
    static NAN_METHOD(close);

    static NAN_METHOD(New);

    Nan::Persistent<Object> njs_impl;
};
#endif //DJINNI_GENERATED_NJSDATABASESTATEMENT_HPP
