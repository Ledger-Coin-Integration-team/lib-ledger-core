// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from secp256k1.djinni

#include "NJSSecp256k1Cpp.hpp"
#include "NJSObjectWrapper.hpp"
#include "NJSHexUtils.hpp"

using namespace v8;
using namespace node;
using namespace std;

NAN_METHOD(NJSSecp256k1::createInstance) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSSecp256k1::createInstance needs 0 arguments");
    }

    //Check if parameters have correct types

    auto result = ledger::core::api::Secp256k1::createInstance();

    //Wrap result in node object
    auto arg_0 = NJSSecp256k1::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_0);
}
NAN_METHOD(NJSSecp256k1::computePubKey) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSSecp256k1::computePubKey needs 2 arguments");
    }

    //Check if parameters have correct types
    if(!info[0]->IsString())
    {
        Nan::ThrowError("info[0] should be a hexadecimal string.");
    }
    std::vector<uint8_t> arg_0;
    Nan::Utf8String str_arg_0(info[0]);
    std::string string_arg_0(*str_arg_0, str_arg_0.length());
    if (string_arg_0.rfind("0x", 0) == 0)
    {
        arg_0 = djinni::js::hex::toByteArray(string_arg_0.substr(2));
    }
    else
    {
        arg_0 = std::vector<uint8_t>(string_arg_0.cbegin(), string_arg_0.cend());
    }

    auto arg_1 = Nan::To<bool>(info[1]).FromJust();

    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::Secp256k1>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSSecp256k1::computePubKey : implementation of Secp256k1 is not valid");
    }

    auto result = cpp_impl->computePubKey(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2 = Nan::New<String>("0x" + djinni::js::hex::toString(result)).ToLocalChecked();


    //Return result
    info.GetReturnValue().Set(arg_2);
}
NAN_METHOD(NJSSecp256k1::computeUncompressedPubKey) {

    //Check if method called with right number of arguments
    if(info.Length() != 1)
    {
        return Nan::ThrowError("NJSSecp256k1::computeUncompressedPubKey needs 1 arguments");
    }

    //Check if parameters have correct types
    if(!info[0]->IsString())
    {
        Nan::ThrowError("info[0] should be a hexadecimal string.");
    }
    std::vector<uint8_t> arg_0;
    Nan::Utf8String str_arg_0(info[0]);
    std::string string_arg_0(*str_arg_0, str_arg_0.length());
    if (string_arg_0.rfind("0x", 0) == 0)
    {
        arg_0 = djinni::js::hex::toByteArray(string_arg_0.substr(2));
    }
    else
    {
        arg_0 = std::vector<uint8_t>(string_arg_0.cbegin(), string_arg_0.cend());
    }


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::Secp256k1>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSSecp256k1::computeUncompressedPubKey : implementation of Secp256k1 is not valid");
    }

    auto result = cpp_impl->computeUncompressedPubKey(arg_0);

    //Wrap result in node object
    auto arg_1 = Nan::New<String>("0x" + djinni::js::hex::toString(result)).ToLocalChecked();


    //Return result
    info.GetReturnValue().Set(arg_1);
}
NAN_METHOD(NJSSecp256k1::sign) {

    //Check if method called with right number of arguments
    if(info.Length() != 2)
    {
        return Nan::ThrowError("NJSSecp256k1::sign needs 2 arguments");
    }

    //Check if parameters have correct types
    if(!info[0]->IsString())
    {
        Nan::ThrowError("info[0] should be a hexadecimal string.");
    }
    std::vector<uint8_t> arg_0;
    Nan::Utf8String str_arg_0(info[0]);
    std::string string_arg_0(*str_arg_0, str_arg_0.length());
    if (string_arg_0.rfind("0x", 0) == 0)
    {
        arg_0 = djinni::js::hex::toByteArray(string_arg_0.substr(2));
    }
    else
    {
        arg_0 = std::vector<uint8_t>(string_arg_0.cbegin(), string_arg_0.cend());
    }

    if(!info[1]->IsString())
    {
        Nan::ThrowError("info[1] should be a hexadecimal string.");
    }
    std::vector<uint8_t> arg_1;
    Nan::Utf8String str_arg_1(info[1]);
    std::string string_arg_1(*str_arg_1, str_arg_1.length());
    if (string_arg_1.rfind("0x", 0) == 0)
    {
        arg_1 = djinni::js::hex::toByteArray(string_arg_1.substr(2));
    }
    else
    {
        arg_1 = std::vector<uint8_t>(string_arg_1.cbegin(), string_arg_1.cend());
    }


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::Secp256k1>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSSecp256k1::sign : implementation of Secp256k1 is not valid");
    }

    auto result = cpp_impl->sign(arg_0,arg_1);

    //Wrap result in node object
    auto arg_2 = Nan::New<String>("0x" + djinni::js::hex::toString(result)).ToLocalChecked();


    //Return result
    info.GetReturnValue().Set(arg_2);
}
NAN_METHOD(NJSSecp256k1::verify) {

    //Check if method called with right number of arguments
    if(info.Length() != 3)
    {
        return Nan::ThrowError("NJSSecp256k1::verify needs 3 arguments");
    }

    //Check if parameters have correct types
    if(!info[0]->IsString())
    {
        Nan::ThrowError("info[0] should be a hexadecimal string.");
    }
    std::vector<uint8_t> arg_0;
    Nan::Utf8String str_arg_0(info[0]);
    std::string string_arg_0(*str_arg_0, str_arg_0.length());
    if (string_arg_0.rfind("0x", 0) == 0)
    {
        arg_0 = djinni::js::hex::toByteArray(string_arg_0.substr(2));
    }
    else
    {
        arg_0 = std::vector<uint8_t>(string_arg_0.cbegin(), string_arg_0.cend());
    }

    if(!info[1]->IsString())
    {
        Nan::ThrowError("info[1] should be a hexadecimal string.");
    }
    std::vector<uint8_t> arg_1;
    Nan::Utf8String str_arg_1(info[1]);
    std::string string_arg_1(*str_arg_1, str_arg_1.length());
    if (string_arg_1.rfind("0x", 0) == 0)
    {
        arg_1 = djinni::js::hex::toByteArray(string_arg_1.substr(2));
    }
    else
    {
        arg_1 = std::vector<uint8_t>(string_arg_1.cbegin(), string_arg_1.cend());
    }

    if(!info[2]->IsString())
    {
        Nan::ThrowError("info[2] should be a hexadecimal string.");
    }
    std::vector<uint8_t> arg_2;
    Nan::Utf8String str_arg_2(info[2]);
    std::string string_arg_2(*str_arg_2, str_arg_2.length());
    if (string_arg_2.rfind("0x", 0) == 0)
    {
        arg_2 = djinni::js::hex::toByteArray(string_arg_2.substr(2));
    }
    else
    {
        arg_2 = std::vector<uint8_t>(string_arg_2.cbegin(), string_arg_2.cend());
    }


    //Unwrap current object and retrieve its Cpp Implementation
    auto cpp_impl = djinni::js::ObjectWrapper<ledger::core::api::Secp256k1>::Unwrap(info.This());
    if(!cpp_impl)
    {
        return Nan::ThrowError("NJSSecp256k1::verify : implementation of Secp256k1 is not valid");
    }

    auto result = cpp_impl->verify(arg_0,arg_1,arg_2);

    //Wrap result in node object
    auto arg_3 = Nan::New<Boolean>(result);

    //Return result
    info.GetReturnValue().Set(arg_3);
}
NAN_METHOD(NJSSecp256k1::newInstance) {

    //Check if method called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSSecp256k1::newInstance needs 0 arguments");
    }

    //Check if parameters have correct types

    auto result = ledger::core::api::Secp256k1::newInstance();

    //Wrap result in node object
    auto arg_0 = NJSSecp256k1::wrap(result);


    //Return result
    info.GetReturnValue().Set(arg_0);
}

NAN_METHOD(NJSSecp256k1::New) {
    //Only new allowed
    if(!info.IsConstructCall())
    {
        return Nan::ThrowError("NJSSecp256k1 function can only be called as constructor (use New)");
    }

    //Check if NJSSecp256k1::New called with right number of arguments
    if(info.Length() != 0)
    {
        return Nan::ThrowError("NJSSecp256k1::New needs same number of arguments as ledger::core::api::Secp256k1::createInstance method");
    }

    //Unwrap objects to get C++ classes

    //Call factory
    auto cpp_instance = ledger::core::api::Secp256k1::createInstance();
    djinni::js::ObjectWrapper<ledger::core::api::Secp256k1>::Wrap(cpp_instance, info.This());
    info.GetReturnValue().Set(info.This());
}


Nan::Persistent<ObjectTemplate> NJSSecp256k1::Secp256k1_prototype;

Local<Object> NJSSecp256k1::wrap(const std::shared_ptr<ledger::core::api::Secp256k1> &object) {
    Nan::EscapableHandleScope scope;
    Local<ObjectTemplate> local_prototype = Nan::New(Secp256k1_prototype);

    Local<Object> obj;
    if(!local_prototype.IsEmpty())
    {
        obj = local_prototype->NewInstance(Nan::GetCurrentContext()).ToLocalChecked();
        djinni::js::ObjectWrapper<ledger::core::api::Secp256k1>::Wrap(object, obj);
    }
    else
    {
        Nan::ThrowError("NJSSecp256k1::wrap: object template not valid");
    }
    return scope.Escape(obj);
}

NAN_METHOD(NJSSecp256k1::isNull) {
    auto cpp_implementation = djinni::js::ObjectWrapper<ledger::core::api::Secp256k1>::Unwrap(info.This());
    auto isNull = !cpp_implementation ? true : false;
    return info.GetReturnValue().Set(Nan::New<Boolean>(isNull));
}

void NJSSecp256k1::Initialize(Local<Object> target) {
    Nan::HandleScope scope;

    Local<FunctionTemplate> func_template = Nan::New<FunctionTemplate>(NJSSecp256k1::New);
    Local<ObjectTemplate> objectTemplate = func_template->InstanceTemplate();
    objectTemplate->SetInternalFieldCount(1);

    func_template->SetClassName(Nan::New<String>("NJSSecp256k1").ToLocalChecked());

    //SetPrototypeMethod all methods
    Nan::SetPrototypeMethod(func_template,"createInstance", createInstance);
    Nan::SetPrototypeMethod(func_template,"computePubKey", computePubKey);
    Nan::SetPrototypeMethod(func_template,"computeUncompressedPubKey", computeUncompressedPubKey);
    Nan::SetPrototypeMethod(func_template,"sign", sign);
    Nan::SetPrototypeMethod(func_template,"verify", verify);
    Nan::SetPrototypeMethod(func_template,"newInstance", newInstance);
    Nan::SetPrototypeMethod(func_template,"isNull", isNull);
    //Set object prototype
    Secp256k1_prototype.Reset(objectTemplate);

    //Add template to target
    Nan::Set(target, Nan::New<String>("NJSSecp256k1").ToLocalChecked(), Nan::GetFunction(func_template).ToLocalChecked());
}
