name: Windows

on:
# At the moment, only trigger on working branch
# Later, trigger on pull request
  push:
    branches:
      - github-actions-migration

env:
  source_path: 'libcore_source'
  build_path: 'libcore_build'

jobs:
  prepare:
    runs-on: [self-hosted, windows, x64]
    steps:
      -
        name: Check runner environment
        run: |
          git --version
          cmake --version
          msbuild /help
          cl
          ctest --version

  ###########
  # RELEASE #
  ###########
  release:
    needs: prepare
    runs-on: [self-hosted, windows, x64]
    steps:
      - 
        name: Checkout code
        uses: actions/checkout@v2
        with:
          path: ${{env.source_path}}
          clean: true
          submodules: true
      - 
        name: Build - Cmake
        run: |
          Remove-Item -LiteralPath "${{env.build_path}}" -Force -Recurse -ErrorAction Ignore
          mkdir ${{env.build_path}}
          cd ${{env.build_path}}
          cmake `
            -DBUILD_TESTS=OFF `
            -DSYS_OPENSSL=ON `
            -DOPENSSL_USE_STATIC_LIBS=TRUE `
            ..\${{env.source_path}}
      - 
        name: Build - Make
        run: |
          cmake `
            --build . `
            --config Release `
            -- /m:1
        working-directory: ${{env.build_path}}
      - 
        name : Upload build files
        uses: actions/upload-artifact@v2
        with:
          name: windows-release-build-files
          path: |
            ${{env.build_path}}\core\src\build\Release\ledger-core.dll
      - 
        name: Clean workspace
        if: ${{ always() }}
        run: |
          echo "Cleaning up previous run"
          Remove-Item -LiteralPath "${{ github.workspace }}\${{env.build_path}}" -Force -Recurse
        continue-on-error: true

  #########
  # DEBUG #
  #########
  debug:
    needs: prepare
    runs-on: [self-hosted, windows, x64]
    steps:
      - 
        name: Checkout code
        uses: actions/checkout@v2
        with:
          path: ${{env.source_path}}
          clean: true
          submodules: true
      - 
        name: Build - Cmake
        run: |
          Remove-Item -LiteralPath "${{env.build_path}}" -Force -Recurse -ErrorAction Ignore
          mkdir ${{env.build_path}}
          cd ${{env.build_path}}
          cmake `
            -DBUILD_TESTS=ON `
            -DSYS_OPENSSL=ON `
            -DOPENSSL_USE_STATIC_LIBS=TRUE `
            ..\${{env.source_path}}
      - 
        name: Build - Make
        run: |
          cmake `
            --build . `
            --config Debug `
            -- `
              /m:1
        working-directory: ${{env.build_path}}
      - 
        name : Upload build files
        uses: actions/upload-artifact@v2
        with:
          name: windows-debug-build-files
          path: |
            ${{env.build_path}}\core\src\build\Debug\ledger-core.dll
            ${{env.build_path}}\core\src\build\Debug\ledger-core.pdb
      - 
        name: Run Unit Tests
        run: |
            ctest `
              --interactive-debug-mode 0 `
              --timeout 180 `
              -C Debug `
              -VV
        continue-on-error: true
        working-directory: ${{env.build_path}}
      #- 
      #  name: Run Unit Tests with coverage
      #  run: |
      #     OpenCppCoverage.exe `
      #      --cover_children `
      #      --sources ${{ github.workspace }}\${{env.source_path}}\core\src\* `
      #      --excluded_modules *:\Windows\Sys*\* `
      #      --export_type html:Windows_coverage_report `
      #      -- `
      #        (get-command ctest).path `
      #        --interactive-debug-mode 0 `
      #       --timeout 180 `
      #        -C Debug `
      #        -VV
      #  continue-on-error: true
      #  working-directory: ${{env.build_path}}
      #- 
      #  name: Compress coverage report
      #  run: |
      #    tar -cvzf Windows_coverage_report.tar.gz Windows_coverage_report
      #  working-directory: ${{env.build_path}}
      #- 
      #  name: Upload coverage report
      # uses: actions/upload-artifact@v2
      # with:
      #    name: Windows_coverage_report
      #    path: |
      #        ${{env.build_path}}\Windows_coverage_report.tar.gz
      -  
        name: Clean workspace
        if: ${{ always() }}
        run: |
          echo "Cleaning up previous run"
          Remove-Item -LiteralPath "${{ github.workspace }}\${{env.build_path}}" -Force -Recurse
        continue-on-error: true
