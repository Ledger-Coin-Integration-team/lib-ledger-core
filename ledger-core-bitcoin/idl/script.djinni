BitcoinLikeScriptOperator = record {
    operatorName: string;
    value: i8;
}

BitcoinLikeScriptChunk = interface +c {
    isOperator(): bool;
    isPushedData(): bool;
    getOperator(): optional<BitcoinLikeScriptOperator>;
    getPushedData(): optional<binary>;
    next(): BitcoinLikeScriptChunk;
    hasNext(): bool;
}

# A general purpose script.
BitcoinLikeScript = interface +c {
    # Get the head of the script. Scripts are organized by chunks, so you get an iterator-like
    # interface.
    head(): BitcoinLikeScriptChunk;
    # Turn the script into a string representation.
    toString(): string;
    # Parse data into a script.
    static parse(data: binary): BitcoinLikeScript;
}
