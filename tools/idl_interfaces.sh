#!/usr/bin/env bash
#
# Generate library API with djinni.
# Invocate with TRACE=1 as environment variable to set debug compilation.

set -e

if [[ $TRACE ]] ; then
    echo "Debug compilation enabled"
    trace="true";
else
    trace="false";
fi

function generate_interface {
    COIN_NAME="$1"

    if [[ "$COIN_NAME" == "core" ]]; then
        SUBCORE_DIR=ledger-core
    else
        SUBCORE_DIR=ledger-core-$COIN_NAME
    fi

    SUBCORE_NAME=$(basename $SUBCORE_DIR)
    SUBCORE_API_DIR=$SUBCORE_DIR/inc/$COIN_NAME/api
    SUBCORE_CPP_JNI_DIR=$SUBCORE_DIR/inc/$COIN_NAME/jni

    echo -e "Generating $SUBCORE_NAME API"

    # recreate API directory
    rm -rf $SUBCORE_API_DIR
    mkdir -p $SUBCORE_API_DIR

    # export-header-name is the name of header generated by CMake command
    # "generate_export_header", it allows to export global data symbols in dlls.
    # This option is MANDATORY in case of msvc (2015) build.
    # This option will be the name of the imported header and the correponding variable (defined
    # by EXPORT_MACRO_NAME option) should be exactly same name in upper case

    ./djinni/src/run \
        --idl $SUBCORE_DIR/idl/idl.djinni \
        --cpp-out $SUBCORE_API_DIR \
        --cpp-namespace ledger::core::api \
        --cpp-optional-template std::experimental::optional \
        --cpp-optional-header "<core/utils/Optional.hpp>" \
        --export-header-name libcore_export \
        --jni-include-cpp-prefix "../../api/" \
        --jni-out $SUBCORE_CPP_JNI_DIR \
        --java-out api/core/java \
        --java-package co.ledger.core \
        --trace $trace
}

case "$#" in
    "1")
        generate_interface $1 $2
        ;;

    *)
        echo "Wrong number of arguments; please provide the name of the core to generate the API for."
        exit 1
        ;;
esac
