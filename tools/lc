#!/usr/bin/env bash

# project new <coin-id> [--force]

usage() {
  echo $1
  exit $2
}

main_usage() {
  echo "usage: lc <command>"
  echo -e "  available commands"
  echo -e "    · new     create a new project"
  echo -e "    · api     generate the API interface"
  echo -e "    · pkg     generate a target package for a bundle"

  exit 2
}

new_usage() {
  echo "usage: lc new <coin_name>"

  exit 2
}

api_usage() {
  echo "usage: lc api <list of coin names>"

  exit 2
}

pkg_usage() {
  echo "usage: lc pkg <package system>"
  echo -e "  available package systems"
  echo -e "    · npm     create a new NPM package"
  echo -e "    · rn      create a new React Native package"
  echo -e "    · scala   create a new Scala package"

  exit 2
}

cmd_project_new() {
  if [[ -z "$1" ]];
  then
    new_usage
  fi

  coin_name="$1"
  project_name="ledger-core-$coin_name"
  capitalized_coin_name="$(tr '[:lower:]' '[:upper:]' <<< ${coin_name:0:1})${coin_name:1}"
  echo "—> project $project_name"

  if [[ -d "./$project_name" ]];
  then
    if [[ ! "$2" == "--force" ]];
    then
      usage "project already created; aborting…" 1
    fi
  fi

  echo "—> creating files hierarchy"
  mkdir -p $project_name/{build,idl,inc/$coin_name/database,src/$coin_name/database,test}
  touch $project_name/README.md

  echo "—> symlinking ledger-core’s libraries"
  ln -sf ../ledger-core/lib $project_name/lib
  ln -sf ../ledger-core/cmake $project_name/cmake

  echo "-> symlinking ledger-core’s test librariries"
  ln -sf ../ledger-core/test/lib $project_name/test/lib
  ln -sf ../ledger-core/test/cmake $project_name/test/cmake

  echo "—> generating CMake configuration"
  sed -e s/\$project_name/$project_name/g ./tools/templates/CMakeLists-project.txt.tpl > $project_name/CMakeLists.txt
  sed -e s/\$project_name/$project_name/g -e s/\$coin_name/$coin_name/g ./tools/templates/CMakeLists-project-src.txt.tpl > $project_name/src/CMakeLists.txt
  sed -e s/\$project_name/$project_name/g ./tools/templates/CMakeLists-project-test.txt.tpl > $project_name/test/CMakeLists.txt

  echo "—> generating IDL entry point"
  cp ./tools/templates/idl.djinni $project_name/idl/
  cp ./tools/templates/callback.djinni $project_name/idl/
  ln -sf ../../ledger-core/idl $project_name/idl/ledger-core

  echo "—> creating migrations files"
  sed s/\$project_name/$capitalized_coin_name/g ./tools/templates/Migrations.hpp > $project_name/inc/$coin_name/database/Migrations.hpp
  sed s/\$project_name/$capitalized_coin_name/g ./tools/templates/Migrations.cpp > $project_name/src/$coin_name/database/Migrations.cpp
}

cmd_idl() {
  if [[ "$#" == 0 ]];
  then
    api_usage
  fi

  ./tools/idl_interfaces.sh $*
}

cmd_pkg() {
  if [[ $# != 1 ]];
  then
    pkg_usage
  fi

  ./tools/idl_pkg.sh $1
}

case "$1" in
  "new")
    shift
    cmd_project_new $*
    ;;

  "api")
    shift
    cmd_idl $*
    ;;

  "pkg")
    shift
    cmd_pkg $*
    ;;

  *)
    main_usage
    ;;
esac
